import tkinter as tk
from tkinter import messagebox
import json
import threading
import cv2
from PIL import Image, ImageTk
import time
import re
import numpy as np
import hashlib

from Admin.Styles_admin import *
from Database.Create_db import insert_sinh_vien, create_table_sinh_vien, get_all_sinh_vien
from Admin.face_util import compare_face, extract_face_encodings_from_frame
from tkcalendar import DateEntry
from Admin.List_student import render_student_list

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def capitalize_name(name):
    # Split the name into words, capitalize each word, and join back
    return ' '.join(word.capitalize() for word in name.split())

def render_student_create(container, switch_to_view):
    for widget in container.winfo_children():
        widget.destroy()

    container.config(bg=PAGE_BG_COLOR)
    tk.Label(container, text="üë§ ƒêƒÉng k√Ω t√†i kho·∫£n sinh vi√™n", font=TITLE_FONT, bg="white", fg="#003366").pack(anchor="w", padx=28, pady=(20, 5))
    create_table_sinh_vien()

    main_frame = tk.Frame(container, bg="white")
    main_frame.pack(padx=20, pady=10, fill="both", expand=True)

    # ========== Camera UI ==========
    camera_wrapper = tk.Frame(main_frame, bg=PAGE_BG_COLOR)
    camera_wrapper.pack(side="left", padx=(10, 5), pady=10)

    tk.Label(
        camera_wrapper,
        text=CAMERA_NOTE,
        font=CAMERA_NOTE_FONT,
        bg="white", fg="red", wraplength=440, justify="center"
    ).pack(pady=(0, 5))

    left_frame = tk.Frame(camera_wrapper, bg="black", width=460, height=360, bd=2, relief="ridge")
    left_frame.pack()
    left_frame.pack_propagate(False)
    video_label = tk.Label(left_frame, bg="black")
    video_label.pack(expand=True)

    counter_label = tk.Label(camera_wrapper, text="ƒê√£ ch·ª•p: 0/5 ·∫£nh", bg="white", fg="#003366", font=COUNTER_FONT)
    counter_label.pack(pady=(5, 0))

    # ========== Form UI ==========
    form_wrapper = tk.Frame(
        main_frame,
        bg=FORM_BG_COLOR,
        bd=FORM_BORDER_WIDTH,
        relief=FORM_BORDER_STYLE,
        width=480,
        height=500
    )
    form_wrapper.pack(side="right", padx=10, pady=10)
    form_wrapper.pack_propagate(False)  # NgƒÉn khung t·ª± co gi√£n theo n·ªôi dung

    form_frame = tk.Frame(form_wrapper, bg=FORM_BG_COLOR)
    form_frame.pack(padx=FORM_PADDING_X, pady=FORM_PADDING_Y)

    def make_label(text, row):
        tk.Label(form_frame, text=text, font=LABEL_FONT, bg=FORM_BG_COLOR, fg="white").grid(row=row, column=0, sticky="e", padx=FORM_LABEL_PADX, pady=5)

    def make_entry(row, show=None):
        e = tk.Entry(form_frame, font=ENTRY_FONT, width=25, show=show)
        e.grid(row=row, column=1, padx=FORM_ENTRY_PADX, pady=5)
        return e

    def only_digits(char):
        return char.isdigit()

    name_entry = make_entry(0); make_label("H·ªç v√† t√™n:", 0)
    class_entry = make_entry(1); make_label("L·ªõp:", 1)

    # MSSV
    make_label("MSSV:", 2)
    vcmd = form_frame.register(only_digits)
    mssv_entry = tk.Entry(form_frame, font=ENTRY_FONT, width=25, validate="key", validatecommand=(vcmd, "%S"))
    mssv_entry.grid(row=2, column=1, padx=FORM_ENTRY_PADX, pady=5)

    # Gi·ªõi t√≠nh
    make_label("Gi·ªõi t√≠nh:", 3)
    gender_var = tk.IntVar(value=1)
    gender_frame = tk.Frame(form_frame, bg=FORM_BG_COLOR)
    gender_frame.grid(row=3, column=1, padx=FORM_ENTRY_PADX, pady=5, sticky="w")

    for text, val in [("Nam", 1), ("N·ªØ", 0)]:
        tk.Radiobutton(
            gender_frame, text=text, variable=gender_var, value=val,
            bg=FORM_BG_COLOR, fg="white", font=ENTRY_FONT, selectcolor="black",
            activebackground=FORM_BG_COLOR, activeforeground="white"
        ).pack(side="left", padx=(0, 10))

    # Ng√†y sinh
    make_label("Ng√†y sinh:", 4)
    birth_entry = DateEntry(
        form_frame,
        date_pattern='dd-mm-yyyy',
        font=ENTRY_FONT,
        width=18,
        background='darkblue',
        foreground='white',
        borderwidth=2
    )
    birth_entry.grid(row=4, column=1, padx=FORM_ENTRY_PADX, pady=5, sticky="w")

    address_entry = make_entry(5); make_label("ƒê·ªãa ch·ªâ:", 5)
    email_entry = make_entry(6); make_label("Email:", 6)
    phone_entry = make_entry(7); make_label("S·ªë ƒëi·ªán tho·∫°i:", 7)

    # M·∫≠t kh·∫©u
    show_password_var = tk.BooleanVar(value=False)
    make_label("M·∫≠t kh·∫©u:", 8)
    password_entry = tk.Entry(form_frame, font=ENTRY_FONT, width=25, show="*")
    password_entry.grid(row=8, column=1, padx=FORM_ENTRY_PADX, pady=5)

    def toggle_password():
        password_entry.config(show="" if show_password_var.get() else "*")

    tk.Checkbutton(
        form_frame,
        text="Hi·ªán m·∫≠t kh·∫©u",
        variable=show_password_var,
        command=toggle_password,
        **CHECKBOX_STYLE
    ).grid(row=9, column=1, sticky="w", padx=FORM_ENTRY_PADX, pady=(0, 10))

    # === Logic camera, ƒëƒÉng k√Ω, x·ª≠ l√Ω d·ªØ li·ªáu ===
    cap = None
    running = False
    capture_count = 0

    def clear_form():
        for entry in [name_entry, class_entry, mssv_entry, birth_entry, address_entry, email_entry, phone_entry,
                      password_entry]:
            entry.delete(0, tk.END)
        gender_var.set(0)  # Reset v·ªÅ "Nam"

    def stop_camera():
        nonlocal cap, running
        running = False
        if cap and cap.isOpened():
            cap.release()
            cap = None
        video_label.config(image='')

    def reset_camera():
        nonlocal cap, running, capture_count
        capture_count = 0
        counter_label.config(text="ƒê√£ ch·ª•p: 0/5 ·∫£nh")
        stop_camera()
        cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
        running = True
        update_camera()

    def update_camera():
        if running and cap and cap.isOpened():
            ret, frame = cap.read()
            if ret:
                frame = cv2.flip(frame, 1)
                frame = cv2.resize(frame, (460, 360))
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                img = Image.fromarray(frame)
                imgtk = ImageTk.PhotoImage(image=img)
                video_label.imgtk = imgtk
                video_label.configure(image=imgtk)
        if running:
            video_label.after(10, update_camera)

    def show_popup(msg):
        popup = tk.Toplevel()
        popup.title("Th√¥ng b√°o")
        popup.geometry("300x120")
        popup.resizable(False, False)
        tk.Label(popup, text=msg, wraplength=280, justify="center", fg="red").pack(pady=15)
        tk.Button(popup, text="OK", command=popup.destroy, **POPUP_OK_BUTTON_STYLE).pack(pady=5)
        popup.grab_set()

    def register_sinh_vien():
        nonlocal capture_count
        # H·ªç v√† t√™n
        name = name_entry.get().strip()
        if not name:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n.")
            return

        # Kh√¥ng cho ch·ª©a s·ªë ho·∫∑c k√Ω t·ª± l·∫°
        if not re.match(r"^[A-Za-z√Ä-·ªπ\s]+$", name):
            messagebox.showwarning("L·ªói h·ªç t√™n", "H·ªç t√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng.")
            return

        # T√™n qu√° ng·∫Øn
        if len(name.split()) < 2:
            messagebox.showwarning("L·ªói h·ªç t√™n", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç v√† t√™n.")
            return

        # Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu m·ªói t·ª´
        name = capitalize_name(name)

        mssv = mssv_entry.get().strip()
        email = email_entry.get().strip()

        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
        if not re.match(r'^[\w\.-]+@gmail\.com$', email):
            messagebox.showwarning("L·ªói ƒë·ªãnh d·∫°ng Email", "Email ph·∫£i c√≥ ƒë·ªãnh d·∫°ng h·ª£p l·ªá v√† k·∫øt th√∫c b·∫±ng @gmail.com")
            return

        # Ki·ªÉm tra MSSV v√† Email tr√πng
        for sv in get_all_sinh_vien():
            if sv["mssv"] == mssv:
                messagebox.showerror("Tr√πng MSSV", f"MSSV '{mssv}' ƒë√£ t·ªìn t·∫°i. Vui l√≤ng d√πng MSSV kh√°c.")
                return
            if sv["email"] == email:
                messagebox.showerror("Tr√πng Email", f"Email '{email}' ƒë√£ ƒë∆∞·ª£c d√πng. Vui l√≤ng ch·ªçn email kh√°c.")
                return

        birthdate = birth_entry.get().strip()
        # Gi·ªõi t√≠nh
        gender = gender_var.get()  # L·∫•y gi√° tr·ªã 0 ho·∫∑c 1
        # S·ªë ƒëi·ªán tho·∫°i
        phone = phone_entry.get().strip()
        if not re.match(r'^0\d{9}$', phone):
            messagebox.showwarning("L·ªói S·ªë ƒëi·ªán tho·∫°i", "S·ªë ƒëi·ªán tho·∫°i ph·∫£i g·ªìm ƒë√∫ng 10 ch·ªØ s·ªë v√† b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0.")
            return
        # ƒê·ªãa ch·ªâ
        address = address_entry.get().strip()
        if len(address) < 5:
            messagebox.showwarning("L·ªói ƒë·ªãa ch·ªâ", "ƒê·ªãa ch·ªâ qu√° ng·∫Øn, vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß.")
            return
        # L·ªõp
        class_sv = class_entry.get().strip()
        if not class_sv:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p l·ªõp.")
            return
        # Password
        raw_password = password_entry.get().strip()
        if len(raw_password) < 6:
            messagebox.showwarning("L·ªói m·∫≠t kh·∫©u", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.")
            return

        if not re.search(r'[A-Z]', raw_password):
            messagebox.showwarning("L·ªói m·∫≠t kh·∫©u", "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ c√°i in hoa.")
            return

        if not re.search(r'[a-z]', raw_password):
            messagebox.showwarning("L·ªói m·∫≠t kh·∫©u", "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ c√°i th∆∞·ªùng.")
            return

        if not re.search(r'\d', raw_password):
            messagebox.showwarning("L·ªói m·∫≠t kh·∫©u", "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 s·ªë.")
            return

        if " " in raw_password:
            messagebox.showwarning("L·ªói m·∫≠t kh·∫©u", "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng.")
            return
        password = hash_password(raw_password)

        if not all([name, mssv, email, birthdate, phone, address, class_sv, password]):
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c √¥.")
            return

        encodings = []
        capture_count = 0
        last_capture = time.time()

        def capture_loop():
            nonlocal capture_count, last_capture
            existing = get_all_sinh_vien()  # G·ªçi tr∆∞·ªõc khi v√†o while
            print(f"[DEBUG] C√≥ {len(existing)} sinh vi√™n trong DB ƒë·ªÉ so s√°nh.")

            while capture_count < 5 and cap and cap.isOpened():
                ret, frame = cap.read()
                if not ret:
                    continue
                if time.time() - last_capture >= 1.5:
                    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    enc = extract_face_encodings_from_frame(frame_rgb)

                    if not enc or not isinstance(enc, list) or len(enc) != 128:
                        print("[L·ªói] Encoding m·ªõi kh√¥ng h·ª£p l·ªá, b·ªè qua ·∫£nh n√†y.")
                        continue

                    # Duy·ªát qua danh s√°ch sinh vi√™n
                    for sv in existing:
                        print(f"[DEBUG] So s√°nh v·ªõi {sv['name']} - s·ªë encoding: {len(sv['encodings'])}")
                        for known in sv.get("encodings", []):
                            try:
                                known_array = np.array(known)
                                if known_array.shape != (128,):
                                    print(f"[B·ªè qua] Encoding sai k√≠ch th∆∞·ªõc: {known_array.shape}")
                                    continue
                                if compare_face(enc, [known_array]):
                                    stop_camera()
                                    show_popup(f"G∆∞∆°ng m·∫∑t ƒë√£ t·ªìn t·∫°i: {sv['name']}. Vui l√≤ng d√πng khu√¥n m·∫∑t kh√°c.")
                                    reset_camera()
                                    return
                            except Exception as e:
                                print("[L·ªói] So s√°nh khu√¥n m·∫∑t:", e)

                    encodings.append(enc)
                    capture_count += 1
                    counter_label.config(text=f"ƒê√£ ch·ª•p: {capture_count}/5 ·∫£nh")
                    last_capture = time.time()

            # Sau khi ch·ª•p ƒë·ªß
            if len(encodings) < 5 or any(len(e) != 128 for e in encodings):
                stop_camera()
                show_popup("D·ªØ li·ªáu khu√¥n m·∫∑t kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
                return

            try:
                insert_sinh_vien(
                    name, mssv, email, address, birthdate, gender, class_sv, password,
                    json.dumps(encodings), phone, img=""
                )
                stop_camera()
                messagebox.showinfo("Th√†nh c√¥ng", f"T√†i kho·∫£n '{name}' ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                clear_form()
                reset_camera()
            except Exception as e:
                stop_camera()
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l∆∞u: {e}")

        threading.Thread(target=capture_loop).start()

    # N√∫t "T·∫°o t√†i kho·∫£n"
    tk.Button(
        form_frame,
        text="T·∫°o t√†i kho·∫£n",
        command=register_sinh_vien,
        **CREATE_BUTTON_STYLE
    ).grid(row=10, column=0, columnspan=2, pady=20)

    # N√∫t quay l·∫°i
    back_button = tk.Button(
        camera_wrapper,
        text="‚Üê Quay l·∫°i",
        command=lambda: switch_to_view("dashboard"),
        **BACK_BUTTON_STYLE
    )
    back_button.pack(anchor="w", padx=5, pady=(15, 0))

    # Kh·ªüi ƒë·ªông camera sau khi layout xong
    container.after(500, reset_camera)
    return stop_camera  # Tr·∫£ v·ªÅ h√†m stop_camera ƒë·ªÉ g·ªçi t·ª´ b√™n ngo√†i n·∫øu c·∫ßn