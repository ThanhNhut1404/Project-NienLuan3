import tkinter as tk
from tkinter import messagebox
import re
import hashlib
from Admin.Styles_admin import *
from Database.Create_db import update_sinh_vien
import datetime


def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()


def render_student_edit(container, student_data):
    for widget in container.winfo_children():
        widget.destroy()

    container.config(bg=PAGE_BG_COLOR)
    tk.Label(container, text="üñâ Ch·ªânh s·ª≠a th√¥ng tin sinh vi√™n", font=TITLE_FONT, bg="white", fg="#003366").pack(
        anchor="w", padx=28, pady=(20, 5))

    outer_frame = tk.Frame(
        container,
        bg=FORM_BG_COLOR,
        bd=FORM_BORDER_WIDTH,
        relief=FORM_BORDER_STYLE,
        width=480,
    )
    outer_frame.pack(pady=10)

    form_frame = tk.Frame(outer_frame, bg=FORM_BG_COLOR)
    form_frame.pack(padx=FORM_PADDING_X, pady=FORM_PADDING_Y)

    def create_row(label, value, row, show=None):
        tk.Label(form_frame, text=label, font=LABEL_FONT, bg="#003366", fg="white").grid(row=row, column=0, sticky="e",
                                                                                         padx=10, pady=8)
        entry = tk.Entry(form_frame, font=ENTRY_FONT, width=35, show=show)
        entry.insert(0, value)
        entry.grid(row=row, column=1, padx=10, pady=8)
        return entry

    name_entry = create_row("H·ªç v√† t√™n:", student_data['name'], 0)
    class_entry = create_row("L·ªõp:", student_data['class'], 1)
    mssv_entry = create_row("MSSV:", student_data['mssv'], 2)

    # Gi·ªõi t√≠nh
    tk.Label(form_frame, text="Gi·ªõi t√≠nh:", font=LABEL_FONT, bg="#003366", fg="white") \
        .grid(row=3, column=0, sticky="e", padx=10, pady=8)
    gender_var = tk.IntVar(value=1 if str(student_data['sex']) == "1" else 0)
    gender_frame = tk.Frame(form_frame, bg="#003366")
    gender_frame.grid(row=3, column=1, sticky="w")
    for text, val in [("Nam", 1), ("N·ªØ", 0)]:
        tk.Radiobutton(
            gender_frame, text=text, variable=gender_var, value=val,
            bg="#003366", fg="white", font=ENTRY_FONT,
            selectcolor="black", activebackground="#003366", activeforeground="white"
        ).pack(side="left", padx=(0, 10))

    birth_entry = create_row("Ng√†y sinh:", student_data['date'], 4)
    address_entry = create_row("ƒê·ªãa ch·ªâ:", student_data['address'], 5)
    email_entry = create_row("Email:", student_data['email'], 6)
    phone_entry = create_row("S·ªë ƒëi·ªán tho·∫°i:", student_data.get('phone', ""), 7)

    # M·∫≠t kh·∫©u v·ªõi t√πy ch·ªçn hi·ªÉn th·ªã
    password_entry = create_row("M·∫≠t kh·∫©u:", "", 8, show="*")  # Kh√¥ng hi·ªÉn th·ªã m·∫≠t kh·∫©u ƒë√£ hash
    show_password_var = tk.BooleanVar(value=False)

    def toggle_password():
        password_entry.config(show="" if show_password_var.get() else "*")

    tk.Checkbutton(
        form_frame,
        text="Hi·ªán m·∫≠t kh·∫©u",
        variable=show_password_var,
        command=toggle_password,
        bg="#003366", fg="white", font=ENTRY_FONT,
        selectcolor="black", activebackground="#003366", activeforeground="white"
    ).grid(row=9, column=1, sticky="w", padx=10, pady=(0, 10))

    def save_changes():
        name = name_entry.get().strip()
        mssv = mssv_entry.get().strip()
        email = email_entry.get().strip()
        address = address_entry.get().strip()
        birth = birth_entry.get().strip()
        sex = gender_var.get()
        class_sv = class_entry.get().strip()
        raw_password = password_entry.get().strip()
        phone = phone_entry.get().strip()

        if not all([name, mssv, email, class_sv, birth, phone]):
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.")
            return

        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y sinh
        try:
            datetime.datetime.strptime(birth, "%d-%m-%Y")
        except:
            messagebox.showerror("L·ªói", "Ng√†y sinh kh√¥ng h·ª£p l·ªá. ƒê·ªãnh d·∫°ng ƒë√∫ng: dd-mm-yyyy")
            return

        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
        if not re.match(r'^[\w\.-]+@gmail\.com$', email):
            messagebox.showwarning("L·ªói ƒë·ªãnh d·∫°ng Email", "Email ph·∫£i c√≥ ƒë·ªãnh d·∫°ng h·ª£p l·ªá v√† k·∫øt th√∫c b·∫±ng @gmail.com")
            return

        # Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i
        if not re.match(r'^0\d{9}$', phone):
            messagebox.showwarning("L·ªói S·ªë ƒëi·ªán tho·∫°i", "S·ªë ƒëi·ªán tho·∫°i ph·∫£i g·ªìm ƒë√∫ng 10 ch·ªØ s·ªë v√† b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0.")
            return

        # Ki·ªÉm tra h·ªç v√† t√™n
        if not re.match(r"^[A-Za-z√Ä-·ªπ\s]+$", name):
            messagebox.showwarning("L·ªói h·ªç t√™n", "H·ªç t√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng.")
            return
        if len(name.split()) < 2:
            messagebox.showwarning("L·ªói h·ªç t√™n", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç v√† t√™n.")
            return

        # Ki·ªÉm tra ƒë·ªãa ch·ªâ
        if len(address) < 5:
            messagebox.showwarning("L·ªói ƒë·ªãa ch·ªâ", "ƒê·ªãa ch·ªâ qu√° ng·∫Øn, vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß.")
            return

        # Ki·ªÉm tra m·∫≠t kh·∫©u n·∫øu ng∆∞·ªùi d√πng nh·∫≠p m·∫≠t kh·∫©u m·ªõi
        if raw_password:
            if len(raw_password) < 6:
                messagebox.showwarning("L·ªói m·∫≠t kh·∫©u", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.")
                return
            if not re.search(r'[A-Z]', raw_password):
                messagebox.showwarning("L·ªói m·∫≠t kh·∫©u", "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ c√°i in hoa.")
                return
            if not re.search(r'[a-z]', raw_password):
                messagebox.showwarning("L·ªói m·∫≠t kh·∫©u", "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ c√°i th∆∞·ªùng.")
                return
            if not re.search(r'\d', raw_password):
                messagebox.showwarning("L·ªói m·∫≠t kh·∫©u", "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 s·ªë.")
                return
            if " " in raw_password:
                messagebox.showwarning("L·ªói m·∫≠t kh·∫©u", "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng.")
                return
            password = hash_password(raw_password)
        else:
            # N·∫øu kh√¥ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi, gi·ªØ nguy√™n m·∫≠t kh·∫©u c≈©
            password = student_data['password']

        try:
            update_sinh_vien(student_data['id'], name, mssv, email, address, birth, sex, class_sv, password, phone)
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin sinh vi√™n.")
        except Exception as e:
            messagebox.showerror("L·ªói", str(e))

    def back_to_list():
        from Admin.List_student import render_student_list
        render_student_list(container, back_to_list)

    btn_back = tk.Button(
        form_frame,
        text="‚Üê Quay l·∫°i",
        command=back_to_list,
        **BACK_BUTTON_STYLE
    )
    btn_back.grid(row=10, column=0, pady=(20, 10), sticky="w", padx=(10, 5))

    btn_save = tk.Button(
        form_frame,
        text="C·∫≠p nh·∫≠t",
        command=save_changes,
        **BUTTON_STYLE
    )
    btn_save.grid(row=10, column=1, pady=(20, 10), sticky="e", padx=(5, 10))