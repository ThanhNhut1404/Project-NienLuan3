import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from Admin.Styles_admin import LIST_TITLE_FONT, TREEVIEW_STYLE
from Database.Create_db import get_all_sinh_vien, delete_sinh_vien_by_mssv  # ƒê·∫£m b·∫£o h√†m n√†y tr·∫£ v·ªÅ list[dict]

def on_tree_click(event, tree):
    region = tree.identify("region", event.x, event.y)
    if region != "cell":
        return

    row_id = tree.identify_row(event.y)
    column = tree.identify_column(event.x)

    if column == "#5":  # C·ªôt th·ª© 5 = "actions"
        item = tree.item(row_id)
        values = item["values"]
        if not values:
            return
        mssv = values[3]  # MSSV ·ªü c·ªôt th·ª© 4
        name = values[1]

        confirm = messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a sinh vi√™n: {name} ({mssv})?")
        if confirm:
            delete_sinh_vien_by_mssv(mssv)
            tree.delete(row_id)
            # C·∫≠p nh·∫≠t l·∫°i STT cho c√°c d√≤ng c√≤n l·∫°i
            for idx, item_id in enumerate(tree.get_children(), start=1):
                item_vals = list(tree.item(item_id)["values"])
                item_vals[0] = idx
                tree.item(item_id, values=item_vals)

            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a sinh vi√™n '{name}' kh·ªèi h·ªá th·ªëng.")

def render_student_list(container):
    for widget in container.winfo_children():
        widget.destroy()

    # Style Treeview
    style = ttk.Style()
    style.theme_use("default")

    style.configure("Treeview",
                    font=TREEVIEW_STYLE["font"],
                    background="white",
                    foreground="black",
                    rowheight=TREEVIEW_STYLE["rowheight"],
                    fieldbackground="white",
                    bordercolor=TREEVIEW_STYLE["border_color"],
                    borderwidth=1
                    )

    style.map("Treeview",
              background=[("selected", "white")],
              foreground=[("selected", "black")]
              )

    style.configure("Treeview.Heading",
                    font=TREEVIEW_STYLE["header_font"],
                    background=TREEVIEW_STYLE["header_bg"],
                    foreground=TREEVIEW_STYLE["header_fg"]
                    )

    style.map("Treeview.Heading",
              background=[("active", TREEVIEW_STYLE["header_bg"])],
              foreground=[("active", TREEVIEW_STYLE["header_fg"])]
              )

    style.layout("Treeview", [
        ('Treeview.treearea', {'sticky': 'nswe'})
    ])

    # Ti√™u ƒë·ªÅ cƒÉn tr√°i
    tk.Label(container, text="üìã Danh s√°ch sinh vi√™n", font=LIST_TITLE_FONT, bg="white", fg="#003366") \
        .pack(anchor="w", padx=40, pady=(20, 5))  # CƒÉn l·ªÅ tr√°i, c√°ch l·ªÅ 40px

    # B·∫£ng Treeview n·∫±m gi·ªØa
    center_frame = tk.Frame(container, bg="white")
    center_frame.pack(pady=(0, 20))

    table_frame = tk.Frame(center_frame, bg="white")
    table_frame.pack()

    columns = ("stt", "name", "class", "mssv", "actions")

    tree = ttk.Treeview(table_frame, columns=columns, show="headings", selectmode="none")
    tree.pack(fill=tk.BOTH, expand=True)

    # K·∫øt h·ª£p c·∫£: ngƒÉn k√©o c·ªôt + x·ª≠ l√Ω click n√∫t "X√≥a"
    def handle_click(event):
        region = tree.identify_region(event.x, event.y)
        if region == "separator":
            return "break"  # NgƒÉn ch·ªânh ƒë·ªô r·ªông c·ªôt
        on_tree_click(event, tree)  # N·∫øu kh√¥ng ph·∫£i separator th√¨ x·ª≠ l√Ω click b√¨nh th∆∞·ªùng

    tree.bind("<Button-1>", handle_click)

    tree.heading("stt", text="STT")
    tree.heading("name", text="H·ªç v√† T√™n")
    tree.heading("class", text="L·ªõp")
    tree.heading("mssv", text="MSSV")
    tree.heading("actions", text="Ch·ª©c nƒÉng")

    tree.column("stt", width=50, anchor="center", stretch=False)
    tree.column("name", width=250, anchor="w", stretch=False)
    tree.column("class", width=270, anchor="center", stretch=False)
    tree.column("mssv", width=130, anchor="center", stretch=False)
    tree.column("actions", width=200, anchor="center", stretch=False)

    # Load d·ªØ li·ªáu sinh vi√™n
    students = get_all_sinh_vien()
    for idx, sv in enumerate(students, start=1):
        tag = "even" if idx % 2 == 0 else "odd"
        tree.insert(
            "", "end",
            values=(idx, sv["name"], sv["class"], sv["mssv"], "üõ† S·ª≠a | ‚ùå X√≥a"),
            tags=(tag,)
        )

    # C·∫•u h√¨nh m√†u xen k·∫Ω cho t·ª´ng d√≤ng
    tree.tag_configure("even", background=TREEVIEW_STYLE["even_row_bg"])
    tree.tag_configure("odd", background=TREEVIEW_STYLE["odd_row_bg"])

